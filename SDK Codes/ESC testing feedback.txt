#include "xgpio.h"
#include "xiicps.h"
#include "xstatus.h"
#include "xil_printf.h"
#include "sleep.h"

#define GPIO_UH_DEVICE_ID  XPAR_AXI_GPIO_0_DEVICE_ID  // High side U
#define GPIO_UL_DEVICE_ID  XPAR_AXI_GPIO_1_DEVICE_ID  // Low side U
#define GPIO_VH_DEVICE_ID  XPAR_AXI_GPIO_2_DEVICE_ID  // High side V
#define GPIO_VL_DEVICE_ID  XPAR_AXI_GPIO_3_DEVICE_ID  // Low side V
#define GPIO_WH_DEVICE_ID  XPAR_AXI_GPIO_4_DEVICE_ID  // High side W
#define GPIO_WL_DEVICE_ID  XPAR_AXI_GPIO_5_DEVICE_ID  // Low side W
#define IIC_DEVICE_ID      XPAR_XIICPS_0_DEVICE_ID    // Zynq PS I2C
#define ADS1115_ADDR       0x48  // Default I2C address of ADS1115

XGpio GpioUH, GpioUL, GpioVH, GpioVL, GpioWH, GpioWL;
XIicPs Iic;

const u8 commutationTable[6][6] = {
    {1, 0, 1, 0, 0, 1},
    {1, 0, 0, 1, 1, 0},
    {0, 1, 1, 0, 1, 0},
    {0, 1, 1, 0, 0, 1},
    {1, 0, 0, 1, 0, 1},
    {0, 1, 0, 1, 1, 0}
};

void SetCommutationStep(int step) {
    XGpio_DiscreteWrite(&GpioUH, 1, commutationTable[step][0]);
    XGpio_DiscreteWrite(&GpioUL, 1, commutationTable[step][1]);
    XGpio_DiscreteWrite(&GpioVH, 1, commutationTable[step][2]);
    XGpio_DiscreteWrite(&GpioVL, 1, commutationTable[step][3]);
    XGpio_DiscreteWrite(&GpioWH, 1, commutationTable[step][4]);
    XGpio_DiscreteWrite(&GpioWL, 1, commutationTable[step][5]);
}

int ReadBackEMF(u8 channel) {
    u8 writeBuffer[1] = {0x00 | (channel << 4)};  // Select channel
    u8 readBuffer[2];
    XIicPs_MasterSendPolled(&Iic, writeBuffer, 1, ADS1115_ADDR);
    usleep(5000);
    XIicPs_MasterRecvPolled(&Iic, readBuffer, 2, ADS1115_ADDR);
    int rawValue = (readBuffer[0] << 8) | readBuffer[1];
    return rawValue;
}

int main() {
    int Status;
    int step = 0;
    int backEMF_U, backEMF_V, backEMF_W, backEMF_X;

    XGpio_Initialize(&GpioUH, GPIO_UH_DEVICE_ID);
    XGpio_Initialize(&GpioUL, GPIO_UL_DEVICE_ID);
    XGpio_Initialize(&GpioVH, GPIO_VH_DEVICE_ID);
    XGpio_Initialize(&GpioVL, GPIO_VL_DEVICE_ID);
    XGpio_Initialize(&GpioWH, GPIO_WH_DEVICE_ID);
    XGpio_Initialize(&GpioWL, GPIO_WL_DEVICE_ID);

    XGpio_SetDataDirection(&GpioUH, 1, 0);
    XGpio_SetDataDirection(&GpioUL, 1, 0);
    XGpio_SetDataDirection(&GpioVH, 1, 0);
    XGpio_SetDataDirection(&GpioVL, 1, 0);
    XGpio_SetDataDirection(&GpioWH, 1, 0);
    XGpio_SetDataDirection(&GpioWL, 1, 0);

    XIicPs_Config *Config = XIicPs_LookupConfig(IIC_DEVICE_ID);
    XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
    XIicPs_SetSClk(&Iic, 100000);

    xil_printf("BLDC Motor Commutation with Back-EMF Started\n");

    while (1) {
        if (step < 6) {
            SetCommutationStep(step);
            usleep(50000);  // Initial forced commutation
            step = (step + 1) % 6;
        } else {
            backEMF_U = ReadBackEMF(0); // Channel 0
            backEMF_V = ReadBackEMF(1); // Channel 1
            backEMF_W = ReadBackEMF(2); // Channel 2
            backEMF_X = ReadBackEMF(3); // Channel 3

            printf("BackEMF U: %d, V: %d, W: %d, X: %d\n", backEMF_U, backEMF_V, backEMF_W, backEMF_X);

            if (backEMF_U > backEMF_X || backEMF_V > backEMF_X || backEMF_W > backEMF_X) {  // Example threshold
                step = (step + 1) % 6;
                SetCommutationStep(step);
            }
        }
        usleep(50000);
    }
    return XST_SUCCESS;
}
